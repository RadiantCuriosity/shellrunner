
* introduction

Build out a complete golang project that is a json RPC server that listens on a local unix
socket and responds to json RPC function calls.

It should have serveral functions:

** run
Takes a full string as input and runs a bash shell with the argument as "-c", it waits
until the shell exits and then returns all the outputs, both stdout and stderr as to
return values, it also returns the exit code. This is a blocking call until the shell
exits. If the `--keep` flag is provided, the job's data will be kept in memory for later
inspection.

** background
Takes a full string as input and immediatly return a unique integer ID.
In the background it runs a bash shell with the argument as "-c", it collects the stdout
and stderr and any exit codes. This is a non-blocking call.

** status
Takes a unique id returned earlier by 'background' and returns that execution's status,
the original command, whether it is still running or has exited or errored. It also
returns the start time (in RFC3339 format) and the duration of the execution in seconds.

** output
Takes a unique id returned earlier by 'background' and returns any outputs from stdout and
stderr. It can optionally release the job's resources after returning the output.

** release
Takes a unique id and removes the corresponding job's data from memory, allowing it to be
garbage collected.

** release-all
Releases all finished jobs from memory.

** list
Returns a list of all jobs currently in memory, with each job represented by its ID and
current status.

** statistics
Returns statistics about all commands executed since the server started, including the
total count, average duration, and maximum duration.

** since
Takes a unique id and returns any new stdout and stderr output since the last time
'since' or 'output' was called for that ID. The first call returns all output since
the job started.

* Project Status

This project is complete and fully functional.

*** Building the project
To build the project, run the following command:
#+begin_src sh
go build
#+end_src

*** Testing the project
To run the unit tests, run the following command:
#+begin_src sh
go test -v
#+end_src

*** Running the server
To run the server, execute the following command:
#+begin_src sh
./shellrunner
#+end_src

The server will listen on a unix socket at `/tmp/shellrunner.sock`.

*** Client Usage
A test client is provided in the `client/` directory.

To use the client, run the following command from the project root:
#+begin_src sh
go run client/main.go <method> [args...]
#+end_src

The available methods are:
- `run <command> [--keep]`: Executes a command and waits for it to finish. If `--keep` is specified, the job data is stored for later retrieval.
- `background <command>`: Executes a command in the background and returns a job ID.
- `status <job_id>`: Checks the status of a background job.
- `output <job_id> [--release]`: Retrieves the output of a background job. If `--release` is specified, the job's resources are freed after retrieval.
- `release <job_id>`: Releases the resources for a completed job.
- `release-all`: Releases all finished jobs.
- `list`: Lists the ID and status of all jobs currently in memory.
- `statistics`: Retrieves execution statistics.

**** Examples
#+begin_src sh
# Run a command synchronously and keep the results
go run client/main.go run "ls -l" --keep

# Start a background job
go run client/main.go background "sleep 5; echo 'done'"

# List all jobs
go run client/main.go list

# Check the status of a job (e.g., 1)
go run client/main.go status "1"

# Get the output of a job and release it
go run client/main.go output "1" --release

# Release all finished jobs
go run client/main.go release-all

# Get server statistics
go run client/main.go statistics
#+end_src

*** Logging
The server includes optional logging to stdout. To enable it, you can either use the `-logging` command-line flag or set the `SHELLRUNNER_LOGGING` environment variable to `true`.

Using the flag:
#+begin_src sh
./shellrunner -logging
#+end_src

Using the environment variable:
#+begin_src sh
SHELLRUNNER_LOGGING=true ./shellrunner
#+end_src
